package com.heliosmi.euler

import org.scalatest.Suite
import org.scalatest.Spec
import scala.math.BigInt
import com.typesafe.scalalogging.slf4j.LazyLogging

class EulerMathTest extends Suite with LazyLogging {

  /**
   * Problem 1
   * If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of
   * these multiples is 23.
   * Find the sum of all the multiples of 3 or 5 below 1000.
   */
  def testSumOfDivisors() {
    //initial condition
    expect(23) { EulerMath.sumOfDivisors(10, 3, 5) }

    //solution taken from google
    expect(233168) { EulerMath.sumOfDivisors(1000, 3, 5) }
  }

  /**
   * Problem 2
   * Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with
   * 1 and 2, the first 10 terms will be:
   * 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
   * By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the
   * sum of the even-valued terms.
   */
  def testSumFibonacci() {
    expect(4613732) { EulerMath.sumFibonacci() }
  }

  /**
   * Problem 3
   * The prime factors of 13195 are 5, 7, 13 and 29.
   * What is the largest prime factor of the number 600851475143 ?
   */
  def testPrimeFactors_600851475143() {
    expect(3) { EulerMath.largestPrimeFactor(3) }
    expect(5) { EulerMath.largestPrimeFactor(5) }
    expect(5) { EulerMath.largestPrimeFactor(15) }     
    expect(29) { EulerMath.largestPrimeFactor(13195) }    

    expect(6857) { EulerMath.largestPrimeFactor(600851475143L) }

  }

  /**
   * Problem 4
   * A palindromic number reads the same both ways. The largest palindrome made from the product of two
   * 2-digit numbers is 9009 = 91 99.
   * Find the largest palindrome made from the product of two 3-digit numbers.
   */
  def testFindLargestPalindromeProduct() {
    expect(906609) { EulerMath.largestPalindrome() }
  }

  /**
   * Problem 5
   * 2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any
   * remainder.
   * What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?
   */
  def testFindSmallestNumberDivisibleLessThan20() {

    expect(2520) { EulerMath.lcm((1L to 10L).toList) }
    expect(232792560) { EulerMath.lcm((1L to 20L).toList) }

  }

  def testDiffBetweenSumAndSquare() {
    expect(2640)(EulerMath.differenceBetweenSumAndSquare(10))
    expect(25164150)(EulerMath.differenceBetweenSumAndSquare(100))
  }

  /**
   * Problem 7
   * By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13.
   * What is the 10 001st prime number?
   */
  def testFindPrimenumber_10001() {
    //list index starts from 0
    expect(104743) { EulerMath.primes(10000) }
  }

  /**
   *
   * Problem 8
   * Find the greatest product of five consecutive digits in the 1000-digit number.
   *
   * 73167176531330624919225119674426574742355349194934
   * 96983520312774506326239578318016984801869478851843
   * 85861560789112949495459501737958331952853208805511
   * 12540698747158523863050715693290963295227443043557
   * 66896648950445244523161731856403098711121722383113
   * 62229893423380308135336276614282806444486645238749
   * 30358907296290491560440772390713810515859307960866
   * 70172427121883998797908792274921901699720888093776
   * 65727333001053367881220235421809751254540594752243
   * 52584907711670556013604839586446706324415722155397
   * 53697817977846174064955149290862569321978468622482
   * 83972241375657056057490261407972968652414535100474
   * 82166370484403199890008895243450658541227588666881
   * 16427171479924442928230863465674813919123162824586
   * 17866458359124566529476545682848912883142607690042
   * 24219022671055626321111109370544217506941658960408
   * 07198403850962455444362981230987879927244284909188
   * 84580156166097919133875499200524063689912560717606
   * 05886116467109405077541002256983155200055935729725
   * 71636269561882670428252483600823257530420752963450
   */
  def testfindProductOfConsecutiveDigits() {
    val number = new java.math.BigInteger("7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450")
    val numberInScala = new BigInt(number)

    expect(40824)(EulerMath.productOfFiveConsecutiveDigits(numberInScala))
  }

  /**
   * Problem 9
   * A Pythagorean triplet is a set of three natural numbers, a b c, for which,
   * a2 + b2 = c2
   * For example, 32 + 42 = 9 + 16 = 25 = 52.
   * There exists exactly one Pythagorean triplet for which a + b + c = 1000.
   * Find the product abc
   */
  def testPythagoreanTripleProduct() {
    expect(31875000) { EulerMath.pythagoreanTripletProduct }
  }

  /**
   * Problem 10
   * The sum of the primes below 10 is 2 + 3 + 5 + 7 = 17.
   * Find the sum of all the primes below two million.
   *
   */
  def testSumOfPrimesBelowUpperLimit() {
    expect(17) { EulerMath.sumOfPrimes(10) }
    //expect(142913828922L){EulerMath.sumOfPrimes(2000000)}
  }
  
  def testTriangleNumberDivisors(){
    /*expect(28){EulerMath.triangleNumberDivisors(5)}
    expect(29){EulerMath.triangleNumberDivisors(500)}*/
    println("Inside triange number method")
    expect(3){(1 to 10000).toList.map(p=> (p*(p+1))/2).map(k => EulerMath.largestPrimeFactor(k)).max}
  }

  /**
   *
   *
   *
   *  !---Util Method tests -----!
   *
   *
   *
   *  **
   */

  def testGcd() {
    expect(3) { EulerMath.gcd(3, 6) }
    expect(5) { EulerMath.gcd(List(5, 15, 145)) }
  }

  /**
   * Test for Fibonacci generation (starting at index 0)
   *  1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
   */
  def testFibonacci() {
    expect(3) { EulerMath.fibonacci(2) }
    expect(8) { EulerMath.fibonacci(4) }
    expect(34) { EulerMath.fibonacci(7) }
  }

}